一、入门
1、文档
文档是多个键及其关联的值有序地放置在一起
文档中的键/值对有序的,区分大小写，区分类型
MongoDB中写操作的原子性限制在文档级别，对文档的保存，修改，删除等都是原子操作
MongoDB不支持事务

2、集合
db.createCollection() 创建集合
集合就是一组文档
一个集合里面的文档可以是各式各样的
{"name":"joe"}
{"name":"jack","sex":"male"}


二、客户端
show dbs:显示数据库列表
show collections：显示当前数据库中的集合（类似关系数据库中的表）
show users：显示用户
use <db name>：切换当前数据库，这和MS-SQL里面的意思一样
db.help()：显示数据库操作命令，里面有很多的命令
db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令
db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）
db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1
MongoDB没有创建数据库的命令，但有类似的命令。
先运行use myTest命令
再做一些操作（如：db.createCollection('user')）
这样就可以创建一个名叫“myTest”的数据库。

三、MongoDB数据类型
1、基本数据类型
null: 表示空值或不存在的字段
boolean: 两个值true 或 false
数值:如果想插入整数，需要使用NumberInt
字符串
二进制数据
正则表达式：用于查询
{name:/foo/}   name字段含有foo文档
{name:/foo/i}  name字段含有foo文档,且不区分大小写
{name:/^foo/i} name字段含有foo文档,且不区分大小写
Date日期

2、ObjectId : 由24个十六进制字符构成
MongoDB中存储的文档必须有一个"_id"键,一个集合中，文档的唯一标识。是文档主键，不可更改

3、内嵌文档
引用文档模式 : 子文档比较大
嵌套文档模式 : 保证原子性

4、数组: 可以包含不同数据类型的元素
[3.14，"hello",[1,2,3],{"key":"MongoDB"}]

http://www.cnblogs.com/stephen-liu74/archive/2012/08/01/2561557.html
四、索引 : 使用规则和传统数据库类似
组合索引字段顺序：匹配条件在前，范围条件在后
1、创建索引
db.people.ensureIndex({"username":1},{"backgroud":ture})
2、索引的使用时，顺序要和mysql一样
3、唯一索引：可以确保集合的每个文档的指定键都有唯一值
db.people.ensureIndex({"username":1},{"unique":ture})
4、消除重复: 有重复时，会保留第一个，删除其余
db.people.ensureIndex({"username":1},{"unique":ture,"dropDups":ture})
5、删除索引
db.people.dropIndex({"username":1})
6、地理空间索引

聚合
1、db.people.count()

分片: 将数据拆分，将其分散存在不同的机器上
自动分片:将集合切分成，每个数据库分散到若干分片中

五、mongodb 查询操作符的使用

查询年龄在19或21，并且 name是joe或jack
db.student.find({
    $and:[
        { $or:[{age:19},{age:21}]}
        { $or:[{name:"joe"},{name:"jack"}]}
    ]
})

六、mongodb的游标:类似关系型数据的游标cursor对象，使用它来遍历结果集中的数据

因为使用find函数进行查询是，mongodb并不是一次返回结果集中的所有文档，
而是以多条文档的形式分批来返回查询结果，返回的文档会缓存到内存中。当取到结果集最后时，cursor会给mongodb服务器发请求，再次读取数据

mongodb的生命周期

mongodb游标快照: db.collection.find().snapshot()
使用快照后，查询就会在_id索引上来遍历执行，这样就可以保证每个文档只会被返回一次，从而保证一致性

七、mongodb索引
1 单字段索引 ：在普通字段，子文档以及子文档的某个字段上建立的索引
db.student.createIndex({'address':1}) 使用子文档索引查询时，查询条件需要和子文档的字段个数，字段顺序一致
db.student.createIndex({'address.city':1})

2 复合索引 ：在多个字段上建立索引,前缀匹配
db.student.createIndex({name:1,age:-1})
索引字段的排序方向： 索引数据会首先按照name升序，对name相同的文档按照age降序
索引字段的排序顺序
db.student.find().sort({name:1,age:-1})
db.student.find().sort({name:-1,age:1})
db.student.find().sort({name:1,age:1}) 不支持

3 多键索引 ： 对数组建立的索引, 只能一个数组字段
实际上是对数组的每个元素建立索引，而不是对数组本身建立索引
obj1 = { name : 'bob',scores:[95,98]}
obj2 = { name : 'bob',scores:[95,99]}
db.student.creatIndex({scores:1})
创建后的索引大致
95 -> [obj1,obj2]
98 -> [obj1]
99 -> [obj2]
s
当数组元素是文档类型时,可以为文档的某个字段建立多键索引
{
    "_id" : ObjectId(),
    "title":"abc"
    "comments":[
        {
        text : "text1"
        },
        {
        text : "text1"
        }
    ]
}
db.student.createIndex({"comments.text":1})

4 地理空间索引：　对地理位置数据建立索引
5 全文索引：对每个词建立索引，支持全文搜索
6 哈希索引 ：索引中存储的是哈希值 , 只支持等值查询，不支持范围查找
db.student.createIndex({name:"hashed"}) 在name字段上创建hash索引

7 副本集的组成
复制用于在多台服务器之间备份数据，MongoDB的复制功能是使用操作日志oplog实现的
每个备份节点都维护着自己的oplog，记录着每一次从主节点复制数据的操作，这样每个成员都可以作为同步源提供给其他成员使用。
注意mongo里的数据备份是顺序备份的：比如master->slave1->slave2 , 不会master->slave1 ,master->slave2同时

副本集最大的成员：12个成员
当复制单个数据库的时候，使用主从默认，而不使用副本模式. 但建议使用副本模式，因为主从默认以后会删除



















